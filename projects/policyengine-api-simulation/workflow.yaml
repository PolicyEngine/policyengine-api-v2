# workflows.yaml
main:
  params: [input]  # Optional: pass data into the workflow if needed.
  steps:
    - init:
        assign:
          # Default Cloud Run service URL (hostname only)
          - defaultCloudRunUrl: ${sys.get_env("service_url")}
          # Service path
          - servicePath: ${sys.get_env("service_path")}
          # Tagger service URL
          - taggerServiceUrl: ${sys.get_env("tagger_service_url")}
          # Full URL with path for default service
          - cloudRunUrl: ${defaultCloudRunUrl + "/" + servicePath}
    
    - checkForTagging:
        switch:
            - condition: '${"country" in input and "model_version" in input and input.model_version != null}       ''    next: callTaggerService
        next: callCloudRun
    
    - callTaggerService:
        try:
          call: http.get
          args:
            url: ${taggerServiceUrl + "/tag"}
            auth:
              type: OIDC
            query:
              country: ${input.country}
              model_version: ${input.model_version}
          result: taggerResponse
        retry: ${http.default_retry}
        except:
          as: e
          steps:
            - handleTaggerError:
                switch:
                  - condition: ${e.code == 404}
                    raise: ${"Model version " + input.model_version + " not found for country " + input.country}
                  - condition: true
                    raise: ${e}
    
    - updateCloudRunUrl:
        assign:
          # Assume taggerResponse.body returns a hostname, append the service path
          - cloudRunUrl: ${taggerResponse.body + "/" + servicePath}
    
    - callCloudRun:
        try:
          call: http.post
          args:
            url: ${cloudRunUrl}
            timeout: 1800
            auth:
              type: OIDC
              # Use the base hostname for audience
              audience: ${defaultCloudRunUrl}
            headers:
              Content-Type: "application/json"
            body: ${input}
          result: response
        retry:
          predicate: ${custom_predicate}
          max_retries: 5
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 1.25
    
    - returnResult:
        return: ${response.body}

#retry on any failure. tag links may return 404 before traffic is routed
#the pre-defined http retry strategies will ignore this.
custom_predicate:
  params: [e]
  steps:
    - retry_always:
        return: true
