# For github action deployes we use environment variables to configure terraform
# on desktop we use apply files generated either by the infra-policyengine-api bootstrap
# or manual user config

# get the project ID
include ../.bootstrap_settings/project.env
TAG?=desktop
REPO?=api-v2
REGION?=us-central1

#we have to find the sha of the latest images because terraform doesn't know
#that a label got a new sha between deployments
deploy: .terraform
	@echo "Attempting to get the latest docker images with the '${TAG}' tag"
	$(eval FULL_SHA := $(shell gcloud artifacts docker images describe $(REGION)-docker.pkg.dev/$(PROJECT_ID)/$(REPO)/policyengine-api-full:$(TAG) --format='value(image_summary.digest)'))
	$(eval SIM_SHA := $(shell gcloud artifacts docker images describe $(REGION)-docker.pkg.dev/$(PROJECT_ID)/$(REPO)/policyengine-api-simulation:$(TAG) --format='value(image_summary.digest)'))
	@echo "Latest Full API SHA: ${FULL_SHA}"
	@echo "Latest Simulation API SHA: ${SIM_SHA}"
	@echo "Running terraform apply with ../.bootstrap_settings/apply.tfvars"
	terraform apply -var-file ../.bootstrap_settings/apply.tfvars -var "full_container_tag=${FULL_SHA}" -var "simulation_container_tag=${SIM_SHA}"

.terraform: ../.bootstrap_settings/backend.tfvars
	@echo "Initializing terraform"
	terraform init -backend-config ../.bootstrap_settings/backend.tfvars

bootstrap_beta:
	cd ../infra-policyengine-api && make bootstrap_beta