name: Reusable build workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'The environment to build for (e.g., beta, prod)'

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  REGION: ${{ vars.REGION }}
  REPO: api-v2

jobs:
  build_simulation_api_image:
    name: Build simulation API image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: "read"
      id-token: "write"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: "${{ vars._GITHUB_IDENTITY_POOL_PROVIDER_NAME }}"
        service_account: "builder@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com"
    
    - name: Set up Cloud SDK
      uses: "google-github-actions/setup-gcloud@v2"
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push simulation API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: projects/policyengine-api-simulation/Dockerfile
        push: true
        tags: |
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-simulation:${{ github.sha }}
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-simulation:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  build_full_api_image:
    name: Build full API image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: "read"
      id-token: "write"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: "${{ vars._GITHUB_IDENTITY_POOL_PROVIDER_NAME }}"
        service_account: "builder@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com"
    
    - name: Set up Cloud SDK
      uses: "google-github-actions/setup-gcloud@v2"
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push full API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: projects/policyengine-api-full/Dockerfile
        push: true
        tags: |
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-full:${{ github.sha }}
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-full:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  build_tagger_api_image:
    name: Build tagger API image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: "read"
      id-token: "write"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: "${{ vars._GITHUB_IDENTITY_POOL_PROVIDER_NAME }}"
        service_account: "builder@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com"
    
    - name: Set up Cloud SDK
      uses: "google-github-actions/setup-gcloud@v2"
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push tagger API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: projects/policyengine-api-tagger/Dockerfile
        push: true
        tags: |
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-tagger:${{ github.sha }}
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/policyengine-api-tagger:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64