name: Reusable deploy to gcp workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'The environment to deploy to (e.g., beta, prod)'

env:
  TF_BACKEND_bucket: ${{ vars.PROJECT_ID }}-state
  #TF_VAR_whatever will be picked up as terraform variables.
  TF_VAR_org_id: ${{ secrets.ORG_ID }}
  TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT }}
  TF_VAR_github_repo_owner_id: ${{ github.repository_owner_id }}
  TF_VAR_github_repo: ${{ github.repository }}
  TF_VAR_project_id: ${{ vars.PROJECT_ID }}
  TF_VAR_region: ${{ vars.REGION }}
  TF_VAR_full_container_tag: ${{ github.sha }}
  TF_VAR_simulation_container_tag: ${{ github.sha }}
  BUILD_TAG: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
  COMMIT_TAG: ${{ github.sha }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      #This is required for the test step so it can authenticate and connect to
      #the beta endpoint
      full_api_url: ${{ steps.deploy_infra.outputs.full_api_url }}
    environment: ${{ inputs.environment }}
    env:
      TF_VAR_stage: ${{ inputs.environment }}
      TF_VAR_is_prod: ${{ inputs.environment == 'prod' }}
    
    permissions:
      contents: "read"
      #required to auth against GCP
      id-token: "write"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Authenticate as deploy SA in GCP
      uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: "${{ vars._GITHUB_IDENTITY_POOL_PROVIDER_NAME }}"
        service_account: "deploy@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com"
    - uses: hashicorp/setup-terraform@v3
    - name: Create/update GCP project
      run: make -f Makefile.deploy deploy-project
    - name: Deploy services into the GCP project
      id: deploy_infra
      run: |
        make -f Makefile.deploy deploy-infra
        #parse the resulting output variables and make them outputs of this step.
        FULL_API_URL=$(cat terraform/infra-policyengine-api/terraform_output.json | jq -r .full_api_url.value)
        echo "exporting full_api_url ${FULL_API_URL}"
        echo "full_api_url=${FULL_API_URL}" >> "$GITHUB_OUTPUT"

  integ_test:
    needs: [deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      contents: "read"
      id-token: "write"

    steps:
    - name: checkout repo
      uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.11"
    - name: Set up poetry
      run: uv pip install poetry --system
    - name: Auth as tester SA in GCP
      id: get-id-token
      uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: "${{ vars._GITHUB_IDENTITY_POOL_PROVIDER_NAME }}"
        service_account: "tester@${{ vars.PROJECT_ID }}.iam.gserviceaccount.com"
        token_format: "id_token"
        id_token_audience: ${{ needs.deploy.outputs.full_api_url }}
        id_token_include_email: true
    - name: Mask id token to prevent accidental leak
      run: echo "::add-mask::${{steps.get-id-token.outputs.id_token}}"
    - name: run integ tests against deployed API
      run: make -f Makefile.deploy integ-test  ACCESS_TOKEN=${{steps.get-id-token.outputs.id_token}} FULL_API_URL=${{needs.deploy.outputs.full_api_url }}
